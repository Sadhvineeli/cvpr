from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# Step 1: Load the digits dataset
digits = load_digits()

# Step 2: Features and labels
X = digits.data
y = digits.target

# Step 3: Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train model
model = GaussianNB()
model.fit(X_train, y_train)

# Step 5: Predict
y_pred = model.predict(X_test)

# Step 6: Accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Step 7: Show predictions with actual values
plt.figure(figsize=(10, 4))
for index, (image, pred, actual) in enumerate(zip(X_test[:5], y_pred[:5], y_test[:5])):
    plt.subplot(1, 5, index + 1)
    plt.imshow(image.reshape(8, 8), cmap='gray')
    plt.title(f'P:{pred}\nA:{actual}')
    plt.axis('off')
plt.tight_layout()
plt.show()
