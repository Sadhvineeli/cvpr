import cv2
import numpy as np
import matplotlib.pyplot as plt

def calculate_cdf(hist):
    cdf = hist.cumsum()
    return cdf / cdf[-1]  # Normalize

def histogram_specification(source, reference):
    src = cv2.cvtColor(source, cv2.COLOR_BGR2GRAY)
    ref = cv2.cvtColor(reference, cv2.COLOR_BGR2GRAY)

    src_hist, _ = np.histogram(src.flatten(), 256, [0, 256])
    ref_hist, _ = np.histogram(ref.flatten(), 256, [0, 256])

    src_cdf = calculate_cdf(src_hist)
    ref_cdf = calculate_cdf(ref_hist)

    mapping = np.zeros(256, dtype=np.uint8)
    for i in range(256):
        diff = np.abs(ref_cdf - src_cdf[i])
        mapping[i] = np.argmin(diff)

    matched = mapping[src]
    return src, ref, matched, src_hist, ref_hist, np.histogram(matched.flatten(), 256, [0, 256])[0]

# Load images
source_img = cv2.imread('download.jpeg')
reference_img = cv2.imread('download1.jpeg')

if source_img is None or reference_img is None:
    print("Error: Image(s) not found.")
    exit()

# Apply histogram specification
src_gray, ref_gray, matched_img, src_hist, ref_hist, matched_hist = histogram_specification(source_img, reference_img)

# Plotting
plt.figure(figsize=(15, 8))

# Images
plt.subplot(2, 3, 1)
plt.imshow(src_gray, cmap='gray')
plt.title("Source Image")

plt.subplot(2, 3, 2)
plt.imshow(ref_gray, cmap='gray')
plt.title("Reference Image")

plt.subplot(2, 3, 3)
plt.imshow(matched_img, cmap='gray')
plt.title("Matched Image")

# Histograms
plt.subplot(2, 3, 4)
plt.plot(src_hist, color='blue', label='Source')
plt.plot(ref_hist, color='green', label='Reference')
plt.plot(matched_hist, color='red', label='Matched')
plt.legend()
plt.title("Histograms")



plt.tight_layout()
plt.show()
